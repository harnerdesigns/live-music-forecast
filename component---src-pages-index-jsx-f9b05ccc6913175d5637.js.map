{"version":3,"file":"component---src-pages-index-jsx-f9b05ccc6913175d5637.js","mappings":"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","sources":["webpack://colorado-live-music-dir/./node_modules/url-join/lib/url-join.js","webpack://colorado-live-music-dir/./src/components/ForecastGrid/ForecastGrid.jsx","webpack://colorado-live-music-dir/./src/images/Default-OG-Image.png","webpack://colorado-live-music-dir/./src/components/SEO/SEO.jsx","webpack://colorado-live-music-dir/./src/pages/index.jsx"],"sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./ForecastGrid.scss\";\nimport moment from \"moment-timezone\";\nimport siteConfig from \"../../../data/SiteConfig\";\nimport EventCard from \"../EventCard/EventCard\";\nimport { FontAwesomeIcon } from \"../../../node_modules/@fortawesome/react-fontawesome/index\";\nimport { isSet } from \"lodash\";\nimport NewsletterSignup from \"../NewsletterSignup/NewsletterSignup\";\nimport Ad from \"../Ad/Ad\";\n\nmoment.tz.setDefault(\"America/Denver\");\n\nconst getPostList = (postEdges) => {\n  const postList = [];\n\n  postEdges.forEach((postEdge) => {\n    if (\n      postList[\n        moment(postEdge.node.data.StartDate).format(siteConfig.dateFormat)\n      ]\n    ) {\n      postList[\n        moment(postEdge.node.data.StartDate).format(siteConfig.dateFormat)\n      ].push(postEdge);\n    } else {\n      postList[\n        moment(postEdge.node.data.StartDate).format(siteConfig.dateFormat)\n      ] = [postEdge];\n    }\n  });\n\n  return postList;\n};\n\nconst ForecastGrid = ({ showButton, postEdges, daysToShow, city }) => {\n  const postList = getPostList(postEdges);\n  const today = moment(new Date());\n\n  let dayArray = [\n    {\n      date: today.format(siteConfig.dateFormat),\n      shortDate: today.format(\"MM/DD\"),\n      dateSlug: today.format(\"MM-DD\"),\n      shortDay: \"Today\",\n      longDay: \"Today\",\n    },\n  ];\n\n  let tomorrow = today.add(1, \"days\");\n\n  dayArray.push({\n    date: tomorrow.format(siteConfig.dateFormat),\n    shortDate: tomorrow.format(\"MM/DD\"),\n    dateSlug: tomorrow.format(\"MM-DD\"),\n    shortDay: \"Tomorrow\",\n    longDay: \"Tomorrow\",\n  });\n\n  for (let i = 0; i < daysToShow - 1; i++) {\n    let newDay = today.add(1, \"days\");\n    dayArray.push({\n      date: newDay.format(siteConfig.dateFormat),\n      shortDate: newDay.format(\"MM/DD\"),\n      dateSlug: newDay.format(\"MM-DD\"),\n      shortDay: newDay.format(\"ddd\"),\n      longDay: newDay.format(\"dddd\"),\n    });\n  }\n\n  return (\n    <section className=\"forecast__grid\">\n      <div className=\"forecast__header\">\n        <span className=\"forecast__title\">\n          {city ? city + \"'s\" : \"Colorado's\"} {daysToShow} Day Live Music\n          Forecast:\n        </span>\n      </div>\n      {dayArray.map((day, i) => (\n        <React.Fragment key={i}>\n          <ForecastDay day={day} postList={postList} />\n          {i == 5 ? <NewsletterSignup /> : null}\n          {i == 10 && <Ad/>}\n          {i == 15 && <Ad/>}\n          {i == 20 && <Ad/>}\n        </React.Fragment>\n      ))}\n      {showButton ? (\n        <Link to=\"/calendar\" className=\"calendar-link\">\n          <span className=\"calendar-link__content\">\n            <FontAwesomeIcon icon=\"calendar\" />\n            See The Whole Calendar &raquo;\n          </span>\n        </Link>\n      ) : null}\n    </section>\n  );\n};\n\nexport default ForecastGrid;\n\nconst ForecastDay = ({ day, postList }) => {\n  const [dayOpen, setDayOpen] = useState(\n    day.shortDay == \"Today\" || day.shortDay == \"Tomorrow\"\n  );\n\n  return (\n    <div\n    key={day.shortDay}\n      className={\n        \"forecast__day\" +\n        ` forecast__day--${day.shortDay}` +\n        (dayOpen ? \" forecast__day--open\" : \"\")\n      }\n    >\n      <div\n        className=\"forecast__meta\"\n        onClick={() => {\n          setDayOpen(!dayOpen);\n        }}\n      >\n        <h2>{day.longDay}</h2>\n        <Link to={\"/\" + day.dateSlug}>\n          <h3>{day.shortDate}</h3>\n        </Link>\n        <FontAwesomeIcon\n          className=\"forecast__caret\"\n          icon={dayOpen ? \"caret-down\" : \"caret-up\"}\n        />\n      </div>\n      <div className=\"forecast__scroller\">\n        {postList[day.date] ? (\n          postList[day.date].map((singleday, i) => {\n            if (i > 4) {\n              return;\n            }\n            return (\n              <React.Fragment key={i}>\n                <EventCard event={singleday.node} />\n              </React.Fragment>\n            );\n          })\n        ) : (\n          <h4 className=\"empty-day\">\n            😢\n            <br /> Nothing {day.longDay}\n          </h4>\n        )}\n\n        {postList[day.date]?.length > 4 ? (\n          <Link className=\"see-more-link\" to={`/${day.dateSlug}`}>\n            + {postList[day.date].length - 4} More\n          </Link>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/Default-OG-Image-7c01682d56d1f4dd9b6281175bb19587.png\";","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport defaultOG from \"../../images/Default-OG-Image.png\"\n\nclass SEO extends Component {\n\n  componentDidMount(){\n    const { postNode, postPath, postSEO } = this.props;\n  }\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let Name;\n    let description;\n    let image;\n    let postURL;\n    let author;\n    let postMeta;\n    let ogImage\n\n    if (postSEO) {\n      postMeta = postNode.data;\n      ({ Name } = postMeta);\n      title = Name + (postMeta?.Venues[0] ? \" @ \"+postMeta.Venues[0].data.Name : \"\")  + (postMeta?.Venues[0] ? \", \"+postMeta.Venues[0].data.City + \", CO\" : \"\") + ` | ${config.siteTitle}`;\n      image = postMeta.Image ? postMeta.Image[0].url : defaultOG;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n      description = \"Check out and get tickets to \" + Name + (postMeta?.Venues[0] ? \" @ \"+postMeta.Venues[0].data.Name : \"\")  + (postMeta?.Venues[0] ? \", \"+postMeta.Venues[0].data.City + \", CO\" : \"\")\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      ogImage = defaultOG;\n      image = config.siteLogo;\n    }\n\n    if(image && image.indexOf(\"http\") == -1) image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <title>{Name + (postMeta?.Venues[0] ? \" @ \"+postMeta.Venues[0].data.Name : \"\")  + (postMeta?.Venues[0] ? \", \"+postMeta.Venues[0].data.City + \", CO\" : \"\") + ` | ${config.siteTitle}`}</title>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image ? image : ogImage} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={author && author.twitter ? author.twitter : \"COLiveMusic\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image ? image : ogImage} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\n\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport ForecastGrid from \"../components/ForecastGrid/ForecastGrid\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allAirtable.edges;\n    \n    return (\n      <Layout>\n        <div className=\"index-container\">\n          <SEO />\n          <Helmet title={config.siteTitle} />\n          <ForecastGrid daysToShow={30} postEdges={postEdges} showButton={false} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\nquery IndexQuery($today: Date!) {\n  allAirtable(\n    limit: 2000\n    sort: {fields: [data___StartDate, data___Featured], order: [ASC, DESC]}\n    filter: {data: {Status: {eq: \"Published\"}, StartDate: {lte: $today}}}\n  ) {\n    edges {\n      node {\n        fields{\n          slug\n        }\n        data {\n          StartDate\n          EndDate\n          DoorsTime\n          Name\n          Subtitle\n          Description\n          Tags\n          Featured\n          TicketURL\n          SoldOut\n          Image{\n            url\n          }\n          Artist_Genres\n          Venues {\n            fields{\n              slug\n            }\n            data {\n              Name\n              City\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","moment","showButton","postEdges","daysToShow","city","postList","forEach","postEdge","node","data","StartDate","format","siteConfig","getPostList","today","Date","dayArray","date","shortDate","dateSlug","shortDay","longDay","tomorrow","add","newDay","className","map","day","key","ForecastDay","Link","to","FontAwesomeIcon","icon","useState","dayOpen","setDayOpen","onClick","singleday","event","SEO","componentDidMount","this","props","postNode","postPath","postSEO","render","title","Name","description","image","postURL","postMeta","ogImage","Venues","City","config","Image","url","defaultOG","urljoin","indexOf","blogURL","schemaOrgJSONLD","name","alternateName","itemListElement","position","item","headline","Helmet","content","type","JSON","stringify","property","Component","Index","allAirtable","edges","React"],"sourceRoot":""}