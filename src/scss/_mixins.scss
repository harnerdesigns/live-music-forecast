@mixin breakpoint($point) {
    @if $point == wide {
      @media (min-width: 90rem) {
        @content;
      }
    } @else if $point == desktop {
      @media (min-width: 75rem) {
        @content;
      }
    } @else if $point == laptop {
      @media (min-width: 64rem) {
        @content;
      }
    } @else if $point == tablet {
      @media (min-width: 37.5rem) {
        @content;
      }
    } @else if $point == tabletDown {
      @media (max-width: 64rem) {
        @content;
      }
    } @else if $point == phablet {
      @media (min-width: 37.5rem) {
        @content;
      }
    } @else if $point == mobileonly {
      @media (max-width: 37.5rem) {
        @content;
      }
    }
  }


  /// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function top-shadow($depth, $color: #000) {
  $primary-offset: nth(1 3 10 14 19, $depth) * 1px;
  $blur: nth(2 3 10 14 19, $depth) * 4px;
  $color: rgba($color, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function bottom-shadow($depth, $color: #000) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($color, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin card($depth, $color: #000) {
  @if $depth < 1 {
    box-shadow: inset bottom-shadow(abs($depth), $color), inset top-shadow(abs($depth), $color);
  } @else if $depth>5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}


.page-wrapper{
  width: 100%;
  min-height: 100vh;
  display: grid; 
  grid-template-columns: 1fr;
}

.page-width{
  max-width: 100%;
  width: 95%;
  display: flex;
  margin-left: auto;
  margin-right: auto;
  
  @include breakpoint(laptop) {
      width: 100%;
  }
}

.content-width{
  max-width: 75ch;
  width: 95%;
  display: flex;
  flex-direction: column;
  margin-left: auto;
  margin-right: auto;
  
  @include breakpoint(laptop) {
      width: 100%;
  }
}

.grid {
  display: grid;
  position: relative;
}

.wp-block-group__inner-container{
  margin-left: auto;
  margin-right: auto;
}

@for $i from 1 to 10 {
  .grid--#{$i} {
      grid-template-columns: repeat(#{$i}, 1fr);
  }
  .grid--span-#{$i} {
      grid-column: span #{$i};
  }
}
.grid--span-all {
  grid-column: 1 / -1;
}

@include breakpoint(mobileonly) {
  @for $i from 1 to 10 {
      .grid--mobile-#{$i} {
          grid-template-columns: repeat(#{$i}, 1fr);
      }
      .grid--mobile-span-#{$i} {
          grid-column: span #{$i};
      }
  }
}

@include breakpoint(tabletdown) {
  @for $i from 1 to 10 {
      .grid--tablet-#{$i} {
          grid-template-columns: repeat(#{$i}, 1fr);
      }
      .grid--tablet-span-#{$i} {
          grid-column: span #{$i};
      }
  }
}
.grid--mobile-span-all {
  grid-column: 1 / -1;
}


main {position: relative;}